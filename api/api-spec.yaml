openapi: 3.0.0
servers:
  - description: API on Test Server
    url: https://csse-s302g4.canterbury.ac.nz/test/api/
  - description: API on Production Server
    url: https://csse-s302g4.canterbury.ac.nz/prod/api/

info:
  description: API specification for the SENG302 2021 project
  version: 6.2.1
  title: Wasteless
  contact:
    email: s302team400@cosc.canterbury.ac.nz
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'

tags:
  # User stories
  - name: 'U1: Registering and logging into an individual account'
  - name: 'U2: Cities, States/Regions, Countries'
    description: 'This story is implemented inside the client alone, and as such requires no associated API endpoints to be created'
  - name: 'U3: Searching for Users using Name'
  - name: 'U4: Default Global Application Admin (DGAA)'
  - name: 'U5: Creating Business Accounts'
  - name: 'U6: Acting as Individual or Business'
    description: 'All necessary API endpoints are found in prior stories'
  - name: 'U10 Modifying Individuals'
  - name: 'U11 Modifying Businesses'
  - name: 'U13: Home page'
    description: 'No endpoints required for this story specifically, but several will likely be used from prior and latter stories'
  - name: 'U15: Product Catalogue'
  - name: 'U16: Product Images'
  - name: 'U17: Modify catalogue entries'
  - name: 'U19: Create inventory'
  - name: 'U20: Modify inventory entries'
  - name: 'U22: List sale'
  - name: 'UCM1: Community marketplace'
    description: 'No endpoints required here yet, these will come from the subsequent stories'
  - name: 'UCM2: Card creation'
  - name: 'UCM3: Marketplace section display'
  - name: 'UCM4: Card expiry'
  - name: 'UCM5: Find my cards'
  - name: 'UCM6: Keyword management'
  - name: 'UCM7: Keyword search'
  - name: 'U23: Business search'
  - name: 'UCM9: Edit card'
  - name: 'U28: Product search'
  - name: 'U29: Browse/Search Sale Listings'
  - name: 'U30: Individual Full Sale Listing'
  - name: 'U31: Purchases'
  - name: 'U41: Sales report'
  # Entities
  - name: 'Users'
    description: 'Grouping of endpoints related to the User entity'
  - name: 'Business Accounts'
    description: 'Grouping of endpoints related to Business Accounts'
  - name: 'Catalogue / Products'
    description: 'Grouping of endpoints related to Product entities'
  - name: 'Inventory'
    description: 'Grouping of endpoints related to business inventories'
  - name: 'Listings / sales'
    description: 'Grouping of endpoints related to listings of items and the sales of these listings'
  - name: 'Cards / community marketplace'
    description: 'Grouping of endpoints related to the community marketplace, and the cards the are created for it'
  - name: 'Keywords'
    description: 'Grouping of endpoints related to system-wide keywords that can be added by users and attached to marketplace cards'
  - name: 'Notifications'
    description: 'Grouping of endpoints related to notifications'

security:
  - CookieAuth:
      - user
      - globalApplicationAdmin
      - defaultGlobalApplicationAdmin

paths:
  '/login':
    post:
      tags:
        - 'U1: Registering and logging into an individual account'
        - 'Users'
      summary: Attempt to authenticate a user account with a username and password
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email address of user account for login attempt
                  example: johnsmith99@gmail.com
                password:
                  type: string
                  format: password
                  description: Plain text user password
                  example: '1337-H%nt3r2'
      responses:
        '200':
          $ref: '#/components/responses/AuthenticatedResponse'
        '400':
          description: Failed login attempt, email or password incorrect

  '/users':
    post:
      tags:
        - 'U1: Registering and logging into an individual account'
        - 'Users'
      summary: Create a new user account
      security: [ ]
      responses:
        '201':
          $ref: '#/components/responses/AuthenticatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '409':
          description: Email address already in use
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: New user account data, id will be generated automatically by the server

  '/users/{id}':
    get:
      tags:
        - 'U1: Registering and logging into an individual account'
        - 'Users'
      summary: Retrieve a specific user account
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/users/search':
    get:
      tags:
        - 'U3: Searching for Users using Name'
        - 'Users'
      summary: 'Search for users by some criteria, for now: their name'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - in: query
          name: searchQuery
          schema:
            type: string
          required: true
          description: "Criteria to search users for, e.g: user's full name or one or more of their names/nickname"
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: >-
            Order the users by the given property, according to the following
            rules:

            * fullNameASC: alphabetically by full name, A - Z

            * fullNameDESC: alphabetically by full name, Z - A

            * nicknameASC: alphabetically by nickname, A - Z

            * nicknameDESC: alphabetically by nickname, Z - A

            * emailASC: alphabetically by email, A - Z

            * emailDESC: alphabetically by email, Z - A

            * addressASC: alphabetically by address, A - Z

            * addressDESC: alphabetically by address, Z - A
        - in: query
          name: page
          schema:
            type: string
          required: false
          description: 'The page of users to display.'
      responses:
        '200':
          description: Request successful, a (possibly empty) list of users is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/users/{id}/makeadmin':
    put:
      tags:
        - 'U4: Default Global Application Admin (DGAA)'
        - 'Users'
      summary: Promote a user account to the Global Application Admin role
      security:
        - CookieAuth:
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Action completed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/users/{id}/revokeadmin':
    put:
      tags:
        - 'U4: Default Global Application Admin (DGAA)'
        - 'Users'
      summary: Revokes the Global Application Admin role from a user account
      security:
        - CookieAuth:
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Action completed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '409':
          description: "Returned when the DGAA tries to revoke their own admin status, this is not an allowed action."

  '/businesses':
    post:
      tags:
        - 'U5: Creating Business Accounts'
        - 'Business Accounts'
      summary: Create a new business entity
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
        description: New business account data, id will be generated automatically by the server
      responses:
        '201':
          description: Business account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  businessId:
                    type: integer
                    description: The ID of the business that has just been created
                    example: 100
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/businesses/{id}':
    get:
      tags:
        - 'U5: Creating Business Accounts'
        - 'Business Accounts'
      summary: Retrieve a specific business account
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Business retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/businesses/{id}/makeAdministrator':
    put:
      tags:
        - 'U5: Creating Business Accounts'
        - 'Business Accounts'
      summary: Add an individual as an administrator for a business
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: The ID of the user to add as a business administrator
                  example: 100
      responses:
        '200':
          description: Individual added as an administrator successfully
        '400':
          description: The individual could not be added as an administrator, perhaps because it does not exist or is already an administrator.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: "Forbidden: Returned when the user making the request is not the primary administrator of the business AND is not a global application admin."
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/businesses/{id}/removeAdministrator':
    put:
      tags:
        - 'U5: Creating Business Accounts'
        - 'Business Accounts'
      summary: Remove an individual from administering a business
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: The ID of the user to remove as a business administrator
                  example: 100
      responses:
        '200':
          description: Inidividual removed from administering successfully
        '400':
          description: The individual could not be removed from administering the business, perhaps because it does not exist, was not an administrator of the business, or is the primary administrator of the business.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: "Forbidden: Returned when the user making the request is not the primary administrator of the business AND is not a global application admin."
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/businesses/{id}/products':
    get:
      tags:
        - 'U15: Product Catalogue'
        - 'Business Accounts'
        - 'Catalogue / Products'
      summary: "Retrieve all the products in a business's catalogue"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: >-
            Order the products by the given property, according to the following
            rules:

            * productIdASC: alphabetically by product id, A - Z

            * productIdDESC: alphabetically by product id, Z - A

            * nameASC: alphabetically by name, A - Z

            * nameDESC: alphabetically by name, Z - A

            * recommendedRetailPriceASC: the RRP from least to most

            * recommendedRetailPriceDESC: the RRP from most to least

            * manufacturerASC: alphabetically by manufacturer, A - Z

            * manufacturerDESC: alphabetically by manufacturer, Z - A

            * createdASC: created date from earliest to latest

            * createdDESC: created date from latest to earliest

            * barcodeASC: ordered by barcode, ascending

            * barcodeDESC: ordered by barcode, descending
        - in: query
          name: page
          schema:
            type: string
          required: false
          description: 'The page of products to display.'
      responses:
        '200':
          description: 'Catalogue retrieved successfully. This could be an empty array.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'The account performing the request is neither an administrator of the business, nor a global application admin.'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
    post:
      tags:
        - 'U15: Product Catalogue'
        - 'Business Accounts'
        - 'Catalogue / Products'
      summary: "Add a new product to a business's catalogue"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: string
                    description: The ID of the product that has just been created
                    example: "WATT-420-BEANS"
        '400':
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to add a product to business they do not administer AND the user is not a global application admin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'

  '/images':
    post:
      tags:
        - 'U16: Product Images'
        - 'Catalogue / Products'
      summary: Upload a new image for some photo
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
          description: >-
            which entity will use this image

            rules (enum):

            * USER

            * BUSINESS

            * PRODUCT
        - name: userID
          in: query
          required: false
          schema:
            type: integer
          description: ID of use this image related to
        - name: businessID
          in: query
          required: false
          schema:
            type: integer
          description: ID of business this image related to
        - name: productID
          in: query
          required: false
          schema:
            type: string
          description: ID of product this image related to
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Image created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  imageId:
                    type: integer
                    description: The ID of the image that has just been created
                    example: 1234
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden:
            Returned when a user tries to add an image for another user AND user is not a global application admin
            OR when a user tries to add an image for a business that he do not administer AND the user is not a global application admin
            OR when a user tries to add an image for a product that it is in a catalogue for a business they do not administer AND the user is not a global application admin'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/images/{id}':
    delete:
      tags:
        - 'U16: Product Images'
        - 'Catalogue / Products'
      summary: Delete an image of a product
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: ID of the image to delete
          required: true
          schema:
            type: integer
        - name: imageType
          in: query
          required: true
          schema:
            type: string
          description: >-
            which entity will use this image

            rules (enum):

            * USER

            * BUSINESS

            * PRODUCT
        - name: userID
          in: query
          required: false
          schema:
            type: integer
          description: ID of use this image related to
        - name: businessID
          in: query
          required: false
          schema:
            type: integer
          description: ID of business this image related to
        - name: productID
          in: query
          required: false
          schema:
            type: string
          description: ID of product this image related to
      responses:
        '200':
          description: Image deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden:
            Returned when a user tries to delete an image for another user AND user is not a global application admin
            OR when a user tries to delete an image for a business that he do not administer AND the user is not a global application admin
            OR when a user tries to delete an image for a product that it is in a catalogue for a business they do not administer AND the user is not a global application admin'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/images/{id}/makePrimary':
    put:
      tags:
        - 'U16: Product Images'
        - 'Catalogue / Products'
      summary: Set an existing image to be the new primary image
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: ID of the image to set as being the primary image for product
          required: true
          schema:
            type: integer
        - name: imageType
          in: query
          required: true
          schema:
            type: string
          description: >-
            which entity will use this image

              rules (enum):

              * USER

              * BUSINESS

              * PRODUCT
        - name: userID
          in: query
          required: false
          schema:
            type: integer
          description: ID of use this image related to
        - name: businessId
          in: query
          description: ID of business that owns product
          required: true
          schema:
            type: integer
        - name: productId
          in: query
          description: ID (Product Code) of product to update primary image for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Primary image successfully updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden:
           Returned when a user tries to update the image primary for another user AND user is not a global application admin
           OR when a user tries to update the image primary for a business that he do not administer AND the user is not a global application admin
           OR when a user tries to update the image primary for a product that it is in a catalogue for a business they do not administer AND the user is not a global application admin'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/businesses/{businessId}/products/{productId}':
    put:
      tags:
        - 'U17: Modify catalogue entries'
        - 'Catalogue / Products'
      summary: Modify an existing catalogue item
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: businessId
          in: path
          description: ID of business to search catalogue of
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: ID (Product Code) of product to try to find in catalogue
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to update a product for a business they do not administer AND the user is not a global application admin'

  '/businesses/{id}/inventory':
    get:
      tags:
        - 'U19: Create inventory'
        - 'Business Accounts'
        - 'Inventory'
      summary: "Retrieve a business's product inventory"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: >-
            Order the inventory items by the given property, according to the following
            rules:

            * productIdASC: alphabetically by product id, A - Z

            * productIdDESC: alphabetically by product id, Z - A

            * quantityASC: the quantity from least to most

            * quantityDESC: the quantity from most to least

            * pricePerItemASC: the price per inventory item from least to most

            * pricePerItemDESC: the price per inventory item from most to least

            * totalPriceASC: the total price from least to most

            * totalPriceDESC: the total price from most to least

            * manufacturedASC: manufactured date from earliest to latest

            * manufacturedDESC: manufactured date from latest to earliest

            * sellByASC: sell by date from earliest to latest

            * sellByDESC: sell by date from latest to earliest

            * bestBeforeASC: best before date from earliest to latest

            * bestBeforeDESC: best before date from latest to earliest

            * expiresASC: expiry date from earliest to latest

            * expiresDESC: expiry date from latest to earliest
        - in: query
          name: page
          schema:
            type: string
          required: false
          description: 'The page of inventory items to display.'
        - in: query
          name: barcode
          schema:
            type: string
          required: false
          description: 'Product barcode number for barcode search'
      responses:
        '200':
          description: 'Inventory retrieved successfully. This could be an empty array.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'The account performing the request is neither an administrator of the business, nor a global application admin.'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
    post:
      tags:
        - 'U19: Create inventory'
        - 'Business Accounts'
        - 'Inventory'
      summary: "Add a new inventory item to a business's inventory"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Inventory item created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  inventoryItemId:
                    type: integer
                    description: The ID of the inventory item that has just been created
                    example: 101
        '400':
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to add an inventory item to the inventory of a business they do not administer AND the user is not a global application admin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'

  '/businesses/{businessId}/inventory/{inventoryItemId}':
    put:
      tags:
        - 'U20: Modify inventory entries'
        - 'Business Accounts'
        - 'Inventory'
      summary: Modify an existing inventory item
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: businessId
          in: path
          description: ID of business to search catalogue of
          required: true
          schema:
            type: integer
        - name: inventoryItemId
          in: path
          description: ID of inventory item to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        '200':
          description: Inventory item updated successfully
        '400':
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to update an inventory item for a business they do not administer AND the user is not a global application admin'


  '/listings':
    get:
      tags:
        - 'U29: Browse/Search Sale Listings'
        - 'Listings / sales'
      summary: "Retrieve all listings by given conditions"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - in: query
          name: searchQuery
          schema:
            type: string
          required: false
          description: "Criteria to search for, e.g: full listing name"
        - in: query
          name: searchType
          schema:
            type: string
          required: false
          description: >-
            Search type, the following options are available

            * listingName: the listing name (default)

            * businessName: the business name

            * location: the location
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: >-
            Order the listings by the given property, according to the following rules:
            (product name, country/city of seller, expiry date, seller, price)

            * productNameASC: the product name from A to Z

            * productNameDESC: the product name from Z to A

            * countryASC: the country from A to Z

            * countryDESC: the country from Z to A

            * cityASC: the city from A to Z

            * cityDESC: the city from Z to A

            * expiryDateASC: expiry date from earliest to latest

            * expiryDateDESC: expiry date from latest to earliest

            * sellerNameASC: seller name from A to Z

            * sellerNameDESC: seller name from Z to A

            * priceASC: the price from low to high

            * priceDESC: the price from high to low
        - in: query
          name: page
          schema:
            type: string
          required: false
          description: 'The page of listing to display.'
        - in: query
          name: businessType
          schema:
            type: string
          required: false
          description: >-
            Criteria to search listings for, e.g: business type

            * ACCOMMODATION_AND_FOOD_SERVICES

            * RETAIL_TRADE

            * CHARITABLE_ORGANISATION

            * NON_PROFIT_ORGANISATION
        - in: query
          name: minimumPrice
          schema:
            type: number
            format: double
          required: false
          description: "Criteria to search listings for, listing's minimum price"
        - in: query
          name: maximumPrice
          schema:
            type: number
            format: double
          required: false
          description: "Criteria to search listings for, listing's maximum price"
        - in: query
          name: fromDate
          schema:
            type: string
            format: date-time
          required: false
          description: "Criteria to search listings for dates after this date"
        - in: query
          name: toDate
          schema:
            type: string
            format: date-time
          required: false
          description: "Criteria to search listings for dates before this date"
        - in: query
          name: barcode
          schema:
            type: string
          required: false
          description: "Criteria to search listings for, a barcode"
      responses:
        '200':
          description: Request successful, a (possibly empty) list of listing is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Listing'
        '401':
          $ref: '#/components/responses/UnauthorizedError'


  '/businesses/{id}/listings':
    get:
      tags:
        - 'U22: List sale'
        - 'Business Accounts'
        - 'Listings / sales'
      summary: "Retrieve a business's listings"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: >-
            Order the listings by the given property, according to the following
            rules:

            * quantityASC: the quantity from least to most

            * quantityDESC: the quantity from most to least

            * priceASC: the price from least to most

            * priceDESC: the price from most to least

            * closesASC: closing date from earliest to latest

            * closesDESC: closing date from latest to earliest

            * createdASC: created date from earliest to latest

            * createdDESC: created date from latest to earliest
        - in: query
          name: page
          schema:
            type: string
          required: false
          description: 'The page of listings to display.'
        - in: query
          name: barcode
          schema:
            type: string
          required: false
          description: 'Product barcode number for barcode search'
      responses:
        '200':
          description: 'Listings retrieved successfully. This could be an empty array.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Listing'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
    post:
      tags:
        - 'U22: List sale'
        - 'Business Accounts'
        - 'Listings / sales'
      summary: "Add a new listing for some inventory item of a business"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Listing created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  listingId:
                    type: integer
                    description: The ID of the listing that has just been created
                    example: 57
        '400':
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to add listing for a business they do not administer AND the user is not a global application admin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listing'


  '/listings/{id}/buy':
    put:
      tags:
        - 'U31: Purchases'
        - 'Listings / sales'
      summary: Delete a listing/sale and create a new soldListing for that listing.
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: The id of the given listing.
          required: true
          schema:
            type: integer
            example: 300
      responses:
        '200':
          description: Listing sold successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: "Forbidden (Buying products from your own business)"
        '406':
          $ref: '#/components/responses/NotAcceptableError'


  '/businesses/{businessId}/listings/{listingId}':
    get:
      tags:
        - 'U30: Individual Full Sale Listing'
        - 'Listings / sales'
      summary: 'Retrieve a single listing based on its ID'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: businessId
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
        - name: listingId
          in: path
          description: Listing ID
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: Listing retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/businesses/search':
    get:
      tags:
        - 'U23: Business search'
        - 'Business Accounts'
      summary: 'Search for businesses by some criteria, for now: their name and/or business type'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - in: query
          name: searchQuery
          schema:
            type: string
          required: false
          description: "Criteria to search businesses for, e.g: business's full name"
        - in: query
          name: businessType
          schema:
            type: string
          required: false
          description: >-
            Criteria to search businesses for, e.g: business type

            * ACCOMMODATION_AND_FOOD_SERVICES

            * RETAIL_TRADE

            * CHARITABLE_ORGANISATION

            * NON_PROFIT_ORGANISATION
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: >-
            Order the businesses by the given property, according to the following
            rules:

            * nameASC: alphabetically by business name, A - Z

            * nameDESC: alphabetically by business name, Z - A

            * addressASC: alphabetically by address, A - Z

            * addressDESC: alphabetically by address, Z - A

            * businessTypeASC: alphabetically by business type, A - Z

            * businessTypeDESC: alphabetically by business type, Z - A
        - in: query
          name: page
          schema:
            type: string
          required: false
          description: 'The page of businesses to display.'
      responses:
        '200':
          description: Request successful, a (possibly empty) list of businesses is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/cards':
    post:
      tags:
        - 'UCM2: Card creation'
        - 'Cards / community marketplace'
      summary: "Create a new card to go on the community marketplace"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardId:
                    type: integer
                    description: The ID of the card that has just been created
                    example: 500
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Returned if a user who is not a GAA tries to create a card for somebody else.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
    get:
      tags:
        - 'UCM2: Card creation'
        - 'Cards / community marketplace'
      summary: 'Retrieve all cards for a given section'
      parameters:
        - name: section
          in: query
          description: The section for which cards should be retrieved.
          required: true
          schema:
            type: string
            enum:
              - ForSale
              - Wanted
              - Exchange
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      responses:
        '200':
          description: Request successful, a (possibly empty) list of cards is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/cards/{id}':
    get:
      tags:
        - 'UCM3: Marketplace section display'
        - 'Cards / community marketplace'
      summary: 'Retrieve a specific card'
      parameters:
        - name: id
          in: path
          description: The id of the card to get.
          required: true
          schema:
            type: integer
            example: 500
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      responses:
        '200':
          description: Request successful, a card is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
    delete:
      tags:
        - 'UCM4: Card expiry'
        - 'Cards / community marketplace'
      summary: Delete a community marketplace card
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: The id of the card to get.
          required: true
          schema:
            type: integer
            example: 500
      responses:
        '200':
          description: Card deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden: Returned when a user tries to delete a card that they are not the creator of AND the user is not a GAA'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
    put:
      tags:
        - 'UCM9: Edit card'
        - 'Cards / community marketplace'
      summary: Modify an existing marketplace card
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: ID of marketplace card to try to find.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCard'
      responses:
        '200':
          description: 'Marketplace card updated successfully'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden: Returned when a user tries to update a card for another user AND the user is not a global application admin'


  '/cards/{id}/extenddisplayperiod':
    put:
      tags:
        - 'UCM4: Card expiry'
        - 'Cards / community marketplace'
      summary: 'Extend the display period of a card that is nearing expiry'
      parameters:
        - name: id
          in: path
          description: The id of the card to get.
          required: true
          schema:
            type: integer
            example: 500
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      responses:
        '200':
          description: End of display period successfully extended. Extension amount should be a further two weeks.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden: Returned when a user who is neither the creator of the card, nor a GAA, tries to extend the display period of the card.'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/users/notifications':
    get:
      tags:
        - 'UCM4: Card expiry'
        - 'Notifications'
      summary: 'Retrieve all notifications for current user'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      responses:
        '200':
          description: Notifications for all cards created by current user have been retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/MarketplaceCardNotification'
                    - $ref: '#/components/schemas/KeywordNotification'
                    - $ref: '#/components/schemas/ListingNotification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/notifications/{id}':
    delete:
      tags:
        - 'UCM4: Card expiry'
        - 'Notifications'
      summary: 'Delete a notification by given id'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id of notification to delete
          example: 400
        - in: query
          name: notification type
          schema:
            type: string
          description: >-
            Criteria to delete notification:

            * MARKET_CARD

            * KEYWORD

            * LISTING

            * SOLD_LISTING

      responses:
        '200':
          description: Notification successfully deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/users/{id}/cards':
    get:
      tags:
        - 'UCM5: Find my cards'
        - 'Cards / community marketplace'
      summary: 'Retrieve all active cards that a user has created'
      parameters:
        - name: id
          in: path
          description: The id of the user for whom to get cards.
          required: true
          schema:
            type: integer
            example: 100
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      responses:
        '200':
          description: Request successful, a (possibly empty) list of cards is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/keywords':
    post:
      tags:
        - 'UCM6: Keyword management'
        - 'Keywords'
      summary: "Create a new system-wide keyword"
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      responses:
        '201':
          description: Keyword created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  keywordId:
                    type: integer
                    description: The ID of the keyword that has just been created
                    example: 600
        '200':
          description: Keyword already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  keywordId:
                    type: integer
                    description: The ID of the keyword
                    example: 600
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Keyword'

  '/keywords/search':
    get:
      tags:
        - 'UCM6: Keyword management'
        - 'Keywords'
      summary: 'Search for keywords by partial (or complete) name'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - in: query
          name: searchQuery
          schema:
            type: string
          required: true
          description: 'Criteria to search keywords for, up to six partial and complete matches are returned'
      responses:
        '200':
          description: Request successful, a (possibly empty) list of keywords is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Keyword'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/keywords/{id}':
    delete:
      tags:
        - 'UCM6: Keyword management'
        - 'Keywords'
      summary: 'Delete a keyword as an admin'
      security:
        - CookieAuth:
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of keyword to delete
          example: 600
      responses:
        '200':
          description: Keyword successfully deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden: Returned if a non-GAA user attempts to delete any card.'


  '/businesses/{businessId}/soldListings':
    get:
      tags:
        - 'U31: Purchases'
        - 'Listings / sales'
        - 'Business Accounts'
      summary: 'Search all sold listings for given business'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - in: path
          name: businessId
          schema:
            type: integer
          required: true
          description: ID of the business
          example: 500
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: page of sold listing
      responses:
        '200':
          description: Action completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SoldListing'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'


  '/cards/search':
    get:
      tags:
        - 'UCM7: Keyword search'
        - 'Cards / community marketplace'
        - 'Keywords'
      summary: 'Search for cards based on some keywords'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - in: query
          name: keywordIds
          description: 'The IDs of keywords by which cards are being searched'
          schema:
            type: array
            items:
              type: integer
          required: true
        - name: section
          in: query
          description: The section for which cards should be retrieved.
          required: true
          schema:
            type: string
            enum:
              - ForSale
              - Wanted
              - Exchange
        - in: query
          name: union
          description: Whether or not to get cards that match ANY of the keywords, or only cards that match ALL of the keywords. True = Match ANY, False = Match ALL
          schema:
            type: boolean
          required: true
      responses:
        '200':
          description: Request successful, a (possibly empty) list of cards is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/listings/{id}/bookmark':
    put:
      tags:
        - 'U30: Individual Full Sale Listing'
        - 'Listings / sales'
      summary: Update the bookmark status of a full sale listing.
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: The id of the given full sale listing whose bookmark status changed for the user.
          required: true
          schema:
            type: integer
            example: 118
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isBookmarked:
                  type: boolean
                  description: The new bookmark status of an individual full sale listing.
                  example: true
      responses:
        '200':
          description: Book status update successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/home/bookmarkMessages':
    get:
      tags:
        - 'U30: Individual Full Sale Listing'
        - 'Bookmark messages'
      summary: Retrieves the bookmarked listings' messages.
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      responses:
        '200':
          description: Request successful, a (possibly empty) list of bookmark messages is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookmarkMessage'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/home/bookmarkMessages/{id}':
    delete:
      tags:
        - 'U30: Individual Full Sale Listing'
        - 'Bookmark messages'
      summary: 'Delete bookmark message for user'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: The id of the bookmark message
          required: true
          schema:
            type: integer
            example: 120
      responses:
        '200':
          description: 'Successfully deleted bookmark message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Cannot delete another users bookmark message'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/businesses/{id}/notifications':
    get:
      tags:
        - 'U31: Purchases'
        - 'Notifications'
      summary: 'Retrieve all notifications for a business'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: The id of the given business for which to retrieve the notifications
          required: true
          schema:
            type: integer
            example: 118
      responses:
        '200':
          description: Notifications for all sold listings of a business
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/SoldListingNotification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden: Returned when a user is neither a Global Application Administrator nor an administrator of the business.'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/users/{id}/profile':
    put:
      tags:
        - 'U10 Modifying Individuals'
        - 'Users'
      summary: Modify an existing user
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Smith
                middleName:
                  type: string
                  example: Hector
                nickname:
                  type: string
                  example: Jonny
                bio:
                  type: string
                  example: Likes long walks on the beach
                email:
                  type: string
                  format: email
                  example: johnsmith99@gmail.com
                dateOfBirth:
                  type: string
                  format: date
                  example: '1999-04-27'
                phoneNumber:
                  type: string
                  example: '+64 3 555 0129'
                homeAddress:
                  $ref: '#/components/schemas/Address'
                currentPassword:
                  type: string
                  example: '1337-H%nt3r2'
                  format: password
                  writeOnly: true
                  description: Should not be stored in plain text (i.e hash it)
                newPassword:
                  type: string
                  example: 'NewPassword123!'
                  format: password
                  writeOnly: true
                  description: Should not be stored in plain text (i.e hash it)
      responses:
        '200':
          description: User updated successfully
        '400':
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to update other users info'
        '406':
          description: 'Selected User not exist'

  '/businesses/{id}/profile':
    put:
      tags:
        - 'U11 Modifying Businesses'
        - 'Business Accounts'
      summary: Modify an existing business
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
      responses:
        '200':
          description: Business updated successfully
        '400':
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to update the business info for a business they do not administer AND the user is not a global application admin'
        '406':
          description: 'Selected Business not exist'

  '/businesses/{businessId}/salesReport':
    get:
      tags:
        - 'U41: Sales report'
        - 'Listings / sales'
        - 'Business Accounts'
      summary: 'Retrieve sales report for a business'
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: businessId
          in: path
          description: 'The ID of the given business for which to retrieve the sales report'
          required: true
          schema:
            type: integer
            example: 118
        - name: fromDate
          in: query
          description: 'The date the sales report should be from'
          required: true
          schema:
            type: string
            format: date-time
        - name: toDate
          in: query
          description: 'The date the sales report should be to'
          required: true
          schema:
            type: string
            format: date-time
        - name: granularity
          in: query
          description: 'The granularity of the returned sales report'
          required: true
          schema:
            type: string
            enum:
              - Total
              - Yearly
              - Monthly
              - Daily
      responses:
        '200':
          description: 'Sales report for a business as per the dates and granularity criteria'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    granularityName:
                      type: string
                      description: 'The name as part of the currently granularity setting, e.g. February, Tuesday or
                      2020 (null if granularity is "Total")'
                      example: February
                    totalSales:
                      type: number
                      description: 'The number of sales within the set granularity'
                      example: 420
                    totalRevenue:
                      type: number
                      format: double
                      description: 'The currency value of sales within the set grandularity'
                      example: 69.69
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden: Returned when a user is neither a Global Application Administrator nor an
          administrator of the business.'
        '406':
          $ref: '#/components/responses/NotAcceptableError'

  '/businesses/{businessId}/searchProducts':
    get:
      tags:
        - 'U28: Product search'
        - 'Catalogue / Products'
      summary: "Search for a business's products by a given query in one of four possible fields. For example, by name or description."
      security:
        - CookieAuth:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
      parameters:
        - name: businessId
          in: path
          description: 'The ID of the given business to search their product catalogue'
          required: true
          schema:
            type: integer
            example: 118
        - in: query
          name: searchQuery
          schema:
            type: string
          required: true
          description: "String to search products for. This string will be matched by the selected field to search in."
        - in: query
          name: searchBy
          schema:
            type: string
          required: true
          description: >-
            The product field to search by.
            Can be one of:

            * productName: The name of the product

            * productId: The ID of the product

            * description: The description of the product

            * manufacturer: The product's manufacturer
      responses:
        '200':
          description: Request successful, a (possibly empty) list of products is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'


components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
  responses:
    BadRequestError:
      description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: The user does not have permission to perform the requested action
    NotAcceptableError:
      description: 'The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.'
    AuthenticatedResponse:
      description: >
        Response returned to client when they have performed an action to gain authentication (registering or logging in).
        This response includes a session token that the client can use in future API requests to authenticate itself.
        This session token is set as a cookie with name 'JSESSIONID', and will need to be included in subsequent requests to the server.
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                type: integer
                description: The ID of the user that has just been authenticated
                example: 100
      headers:
        Set-Cookie:
          schema:
            type: string
            example: JSESSIONID=abcde12345; Path=/; HttpOnly

  schemas:
    Keyword:
      type: object
      description: "Represents a single 'keyword' within the system - similar to a hashtag."
      properties:
        id:
          type: integer
          example: 600
          readOnly: true
          description: Unique ID, autogenerated by the system
        name:
          type: string
          description: The text value of the keyword
          example: Vehicle
        created:
          type: string
          format: date-time
          example: '2021-07-15T05:10:00Z'
          readOnly: true
          description: Date and time when the keyword was created

    Card:
      type: object
      description: Represents an item in the Community Marketplace
      required:
        - title
        - creatorId
        - section
        - keywordIds
      properties:
        id:
          type: integer
          example: 500
          readOnly: true
          description: Unique ID, autogenerated by the system
        creatorId:
          type: integer
          example: 100
          writeOnly: true
        creator:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        section:
          type: string
          enum:
            - ForSale
            - Wanted
            - Exchange
        created:
          type: string
          format: date-time
          example: '2021-07-15T05:10:00Z'
          readOnly: true
          description: Date and time when the card was created
        displayPeriodEnd:
          type: string
          format: date-time
          example: '2021-07-29T05:10:00Z'
          readOnly: true
          description: Date and time when the display period of the card is set to expire. This defaults to 2 weeks from creation, and can be extended per UCM4.
        title:
          type: string
          description: Title of the card, should be suitable for one-line displays.
          example: "1982 Lada Samara"
        description:
          type: string
          description: A more detailed description of the card.
          example: "Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar."
        keywords:
          type: array
          readOnly: true
          description: Keywords describing the card. A card can have one or more keywords associated with it.
          items:
            $ref: '#/components/schemas/Keyword'
        keywordIds:
          type: array
          writeOnly: true
          description: The IDs of keywords that will be associated with a card once it is created. These keywords are created through the POST /keywords endpoints (UCM6).
          items:
            type: integer
            example: 20, 15, 600

    EditCard:
      type: object
      description: Represents editing an item in the Community Marketplace
      required:
        - title
        - description
        - keywordIds
      properties:
        title:
          type: string
          description: Title of the card.
          example: "1982 Lada Samara"
        description:
          type: string
          description: A more detailed description of the card.
          example: "Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar."
        keywordIds:
          type: array
          writeOnly: true
          description: The IDs of keywords that will be associated with a card once it is created. These keywords are created through the POST /keywords endpoints (UCM6).
          items:
            type: integer
            example: 20

    Listing:
      type: object
      description: A listing for the sale of some product from a business's inventory
      required:
        - inventoryItemId
        - quantity
        - price
      properties:
        id:
          type: integer
          example: 57
          readOnly: true
          description: A unique (within the business) identifer for this listing - autogenerated by the system
        inventoryItem:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/InventoryItem'
        inventoryItemId:
          type: integer
          example: 101
          writeOnly: true
        quantity:
          type: integer
          example: 3
          description: Must be greater than zero, and less than or equal to the quantity of the correpsonding inventory entry
        price:
          type: number
          format: double
          description: Price of the listing
          example: 17.99
        moreInfo:
          type: string
          example: 'Seller may be willing to consider near offers'
          description: An optional field for further information about the listing
        created:
          type: string
          format: date-time
          example: '2021-07-14T11:44:00Z'
          readOnly: true
          description: Date and time when the listing was created
        closes:
          type: string
          format: date-time
          example: '2021-07-21T23:59:00Z'
          description: Date and time when the listing closes (defaults to expiry date of related inventory item)
        isBookmarked:
          type: boolean
          example: false
          description: Whether the listing has been bookmarked by the current user. True if bookmarked
        totalBookmarks:
          type: integer
          example: 150
          description: The total number of times the listing has been bookmarked by all users

    InventoryItem:
      type: object
      description: Entity representing an instance of a stock of some product
      required:
        - productId
        - quantity
        - expires
      properties:
        id:
          type: integer
          example: 101
          readOnly: true
          description: A unique (within the inventory) identifer for this item - autogenerated by the system
        product:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Product'
        productId:
          writeOnly: true
          type: string
          example: "WATT-420-BEANS"
          description: Product Code of corresponding product in business's catalogue. Notice that the ID is given when writing, but the full object is returned when reading
        quantity:
          type: integer
          example: 4
          description: How many items of stock are present
        pricePerItem:
          type: number
          format: double
          description: Price to purchase a single item of the product
          example: 6.50
        totalPrice:
          type: number
          format: double
          description: Price for purchasing the entire stock of the product
          example: 21.99
        manufactured:
          type: string
          format: date
          description: The date on which the product was prepared / manufactured
        sellBy:
          type: string
          format: date
          description: The date by which the product ought to be sold
        bestBefore:
          type: string
          format: date
          description: 'The "best before" date of the product'
        expires:
          type: string
          format: date
          description: The expiry date of the product

    Image:
      type: object
      description: Entity representing an image stored on the server
      required:
        - filename
        - thumbnailFilename
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
          description: A unique identifier (system-wide) to represent this image
        filename:
          type: string
          example: "/media/images/23987192387509-123908794328.png"
          description: Relative URI to full size image. A fully qualified URI (e.g www.wasteless.com/media/images/...) should NOT be given.
        thumbnailFilename:
          type: string
          example: "/media/images/23987192387509-123908794328_thumbnail.png"
          description: Relative URI to thumbnail of image. A fully qualified URI (e.g www.wasteless.com/media/images/...) should NOT be given.

    Product:
      type: object
      description: Entity for catalogue items in a product catalogue
      required:
        - name
      properties:
        id:
          type: string
          example: 'WATT-420-BEANS'
          description: >
            Developers can choose whether or not to make this a required field (i.e user
            specified vs. auto-generated). In the case that the team automatically
            generates the IDs, they should still allow this field to be present when
            creating (POST) or modifying (PUT) a product, and then simply ignore its
            value (i.e do not return a 400 code if it is present but not needed). An
            ID only needs to be unique within its catalogue, not system-wide.
        name:
          type: string
          description: The full name of the product
          example: "Watties Baked Beans - 420g can"
        description:
          type: string
          description: A desription of the product
          example: "Baked Beans as they should be."
        manufacturer:
          type: string
          description: The manufacturer of the product
          example: "Heinz Wattie's Limited"
        recommendedRetailPrice:
          type: number
          format: double
          example: 2.20
          description: The recommended retail price of the product, given in whatever currency is in use at the business's location.
        created:
          type: string
          format: date-time
          readOnly: true
          description: The date and time when this product was created. This field is generated automatically by the server.
        images:
          type: array
          readOnly: true
          description: List of images of a product (implemented in U16).
          items:
            $ref: '#/components/schemas/Image'
        barcode:
          type: string
          description: 'The bar code of the product. Note: the application currently only supports EAN-13 and UPC.'
          example: 9400547002634

    Business:
      type: object
      description: Business account entity
      required:
        - name
        - address
        - businessType
      properties:
        id:
          type: integer
          example: 100
          readOnly: true
          description: Automatically generated and assigned by the server
        administrators:
          type: array
          items:
            $ref: '#/components/schemas/User'
          readOnly: true
        primaryAdministratorId:
          type: integer
          example: 20
          description: "The ID of the 'primary' administrator of the business. This is automatically given to the creator of the business."
        name:
          type: string
          example: 'Lumbridge General Store'
        description:
          type: string
          example: 'A one-stop shop for all your adventuring needs'
        address:
          $ref: '#/components/schemas/Address'
        businessType:
          type: string
          enum:
            - Accommodation and Food Services
            - Retail Trade
            - Charitable organisation
            - Non-profit organisation
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:52:00Z'
          readOnly: true
          description: Date and time when the account was created

    Address:
      type: object
      description: Entity representing some physical address
      required:
        - country
      properties:
        streetNumber:
          type: string
          example: '3/24'
        streetName:
          type: string
          example: 'Ilam Road'
        suburb:
          type: string
          example: 'Upper Riccarton'
        city:
          type: string
          example: 'Christchurch'
        region:
          type: string
          example: 'Canterbury'
        country:
          type: string
          example: 'New Zealand'
        postcode:
          type: string
          example: '90210'

    User:
      type: object
      description: Basic user entity
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - homeAddress
        - password
      properties:
        id:
          type: integer
          example: 100
          readOnly: true
          description: Automatically generated and assigned by the server
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        middleName:
          type: string
          example: Hector
        nickname:
          type: string
          example: Jonny
        bio:
          type: string
          example: Likes long walks on the beach
        email:
          type: string
          format: email
          example: johnsmith99@gmail.com
        dateOfBirth:
          type: string
          format: date
          example: '1999-04-27'
        phoneNumber:
          type: string
          example: '+64 3 555 0129'
        homeAddress:
          $ref: '#/components/schemas/Address'
        password:
          type: string
          example: '1337-H%nt3r2'
          format: password
          writeOnly: true
          description: Should not be stored in plain text (i.e hash it)
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the account was created
        role:
          type: string
          readOnly: true
          description: '(Implemented in U4): This property should only be shown to Global Application Admins'
          enum:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
        businessesAdministered:
          type: array
          readOnly: true
          description: '(Implemented in U6): A list of businesses for which the user is an administrator'
          items:
            $ref: '#/components/schemas/Business'

    MarketplaceCardNotification:
      type: object
      description: Notification for marketplace card
      required:
        - id
        - description
        - created
        - marketplaceCard
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
          description: Automatically generated and assigned by the server
        description:
          type: string
          example: Your card (Beef) will be expired in 2h.
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the notification was created
        marketplaceCard:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Card'

    KeywordNotification:
      type: object
      description: Notification for keywords
      required:
        - id
        - description
        - created
        - keywordId
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
          description: Automatically generated and assigned by the server
        description:
          type: string
          example: A new keyword, 'Beef', has been added.
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the notification was created
        keywords:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Keyword'

    ListingNotification:
      type: object
      description: Notification for Listing
      required:
        - id
        - description
        - created
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
          description: Automatically generated and assigned by the server
        description:
          type: string
          example: Listing (Apple) have been saled.
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the notification was created

    SoldListing:
      type: object
      description: Contains the details of a sale of a listing that was completed.
      required:
        - id
        - saleDate
        - listingDate
        - productId
        - quantity
        - price
        - bookmarks
        - customer
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
          description: Automtically generated and assigned by the server
        saleDate:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the sale happened.
        listingDate:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the items of the sale when they were listed origninally.
        productId:
          type: string
          example: 'PROD-123'
          readOnly: true
          description: The id of the product being sold
        quantity:
          type: integer
          example: 200
          readOnly: true
          description: The quantity of items sold.
        price:
          type: number
          format: double
          example: 20.2
          readOnly: true
          description: The price of a single item
        bookmarks:
          type: integer
          example: 10
          readOnly: true
          description: The amount of bookmarks the listing had before being sold.
        customer:
          $ref: '#/components/schemas/User'

    SoldListingNotification:
      type: object
      description: Notification for Sold Listing
      required:
        - id
        - businessId
        - soldListing
        - description
        - created
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
          description: Automatically generated and assigned by the server
        businessId:
          type: integer
          example: 1
          readOnly: true
          description: Must match the ID of the business contained within the sold listing details
        soldListing:
          readOnly: true
          description: The sold listing the notification refers to
          allOf:
            - $ref: '#/components/schemas/SoldListing'
        soldListingId:
          type: integer
          example: 1
          readOnly: true
          description: The ID of the sold listing, automatically generated from the provided sold listing
        description:
          type: string
          example: Your listing, Apple x23, has been purchased.
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the notification was created, automatically generated

    BookmarkMessage:
      type: object
      description: Message/notification for bookmarked individual full sale listing
      required:
        - id
        - description
        - created
        - listingId
        - businessId
        - closes
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
          description: Automatically generated and assigned by the server
        description:
          type: string
          example: Listing (Apple) is bookmarked.
          description: Message content
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the notification was created
        listingId:
          type: integer
          example: 2
          description: Id of related listing
          readOnly: true
        businessId:
          type: integer
          example: 3
          readOnly: true
          description: Id of business listing is from
        closes:
          type: string
          format: date-time
          example: '2021-07-14T14:32:00Z'
          readOnly: true
          description: Date and time that listing will close
